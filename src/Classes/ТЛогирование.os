//*****************************************************************
// Библиотека: TLog
// Автор: Онянов Виталий (Tavalik.ru)
// Версия от 17.08.2017
//

//*****************************************************************
// ГЛОБАЛЬНЫЕ ПЕРЕМЕННЫЕ

// Имя файла в который будет записываться лог
Перем ИмяФайлаЛога Экспорт;
// Переменная для возврата ошибки, если таковая имела место быть
Перем ТекстОшибки Экспорт;
// Строка для разделением уровней (отступ), по умолчанию - табуляция
Перем РазделительУровней Экспорт;
// Количество строк разделения уровноей, добавленных в текущую строку лога
Перем Уровень Экспорт;
// При установки в значение Истина, добавляет текущую дату и время в начало каждой строки
Перем ДатаВремяВКаждойСтроке Экспорт;
// Вывод сообщений при записи в лог, при установки в значение Истина, все строки лога будут выведены в сообщении
Перем ВыводитьСообщенияПриЗаписи Экспорт;


//*****************************************************************
// ЛОКАЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//*****************************************************************
Процедура ИнициироватьПараметры()

	ИмяФайлаЛога = "";
	ТекстОшибки = "";
	Уровень = 0;
	ДатаВремяВКаждойСтроке = Ложь;
	ВыводитьСообщенияПриЗаписи = Истина;
	РазделительУровней = "	";
	
КонецПроцедуры


//*****************************************************************
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//*****************************************************************
// В указанном каталоге создает каталог с имененм задания и файл лога, имя файла сохраняется в глобальной переменной ИмяФайлаЛога
//
// Параметры:
//	ИмяЗадания - Строка - ИмяЗадания или идентификатор лога
//	ИмяКаталога - Строка - Конечный каталог для хранения логов
//	 
Функция СоздатьФайлЛога(ИмяЗадания = "Log", Знач ИмяКаталога = ".") Экспорт

	ТекстОшибки = "";

	Попытка
		СоздатьКаталог(ОбъединитьПути(ИмяКаталога,ИмяЗадания));
		ИмяФайлаЛога = ОбъединитьПути(ИмяКаталога,ИмяЗадания,"Лог_" + ИмяЗадания + "_" + Формат(ТекущаяДата(),"ДФ=yyyy_MM_dd_чч_мм_сс") + ".txt");
		Документ = Новый ТекстовыйДокумент;
		Документ.Записать(ИмяФайлаЛога);
		Файл = Новый Файл(ИмяФайлаЛога);
		ИмяФайлаЛога = Файл.ПолноеИмя;
		Возврат Истина;
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;	
 	
КонецФункции

//*****************************************************************
// Записывает строку лога в файл лога (Путь к файлу хранится в глобальной переменной ИмяФайлаЛога). Запись текста инициируется и закрывается при каждом вызове процедуры.
//	
// Параметры:
//	СтрокаЛога - Строка - Строка лога для записи
//	ДобавитьУровеней - Число - Добавляет указанное число уровней в текущаю строку лога. По умочанию на 0.
//
Функция ЗаписатьСтрокуЛога(СтрокаЛога="", ДобавитьУровеней=0) Экспорт

	ТекстОшибки = "";
	
	Если НЕ ЗначениеЗаполнено(ИмяФайлаЛога) Тогда
		ТекстОшибки = "Файла не создан!";
	КонецЕсли;
	
	Для Сч = 1 По Уровень + ДобавитьУровеней Цикл
		СтрокаЛога = РазделительУровней + СтрокаЛога;
	КонецЦикла;
	
	Если ДатаВремяВКаждойСтроке Тогда
		СтрокаЛога = "[" + Формат(ТекущаяДата(),"ДФ='dd.MM.yyyy чч:мм:сс'") + "] " + СтрокаЛога;
	КонецЕсли;
	
	Попытка
		ЗаписьТекста = Новый ЗаписьТекста;
		ЗаписьТекста.Открыть(ИмяФайлаЛога,,,Истина);
		ЗаписьТекста.ЗаписатьСтроку(СтрокаЛога);
		ЗаписьТекста.Закрыть();
		Если ВыводитьСообщенияПриЗаписи Тогда
			Сообщить(СтрокаЛога);
		КонецЕсли;
		Возврат Истина;
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

//*****************************************************************
// Добавляет количество уровней 
//	
// Параметры:
//	ДобавитьУровеней - Число - Увеличиват значение переменной Уровень на указанное число. По умочанию на 1.
//
Процедура УвеличитьУровень(ДобавитьУровеней=1) Экспорт

	Уровень = Уровень + ДобавитьУровеней;
	
КонецПроцедуры

//*****************************************************************
// Уменьшает количество уровней 
//	
// Параметры:
//	ВычестьУровеней - Число - Уменьшает значение переменной Уровень на указанное число. По умочанию на 1.
//
Процедура УменьшитьУровень(ВычестьУровеней=1) Экспорт

	Уровень = Уровень - ВычестьУровеней;
	
КонецПроцедуры


//*****************************************************************
// Сразу при создании инициируем параметры
ИнициироватьПараметры();
  
